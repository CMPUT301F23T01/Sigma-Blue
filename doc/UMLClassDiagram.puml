@startuml
skinparam classAttributeIconSize 0
left to right direction
class sigma_blue.entity.item.ItemFactory {
~ String factoryTitle
~ Date factoryDate
~ String factoryDescription
~ String factoryMake
~ String factoryModel
~ Double factoryValue
+ {static} ItemFactory newInstance(Date)
+ Item emptyItem()
+ Item templateItem()
+ Item templateItem(String)
+ void setFactoryDate(Date)
+ void setFactoryValue(Double)
- Date getFactoryDate()
- Double getFactoryValue()
}
class sigma_blue.activities.ActivityLauncher {
- ActivityResultLauncher<Input> launcher
- OnActivityResult<Result> onActivityResult
+ {static} ActivityLauncher<Input,Result> registerForActivityResult(ActivityResultCaller,ActivityResultContract<Input,Result>,OnActivityResult<Result>)
+ {static} ActivityLauncher<Input,Result> registerForActivityResult(ActivityResultCaller,ActivityResultContract<Input,Result>)
+ {static} ActivityLauncher<Intent,ActivityResult> registerActivityForResult(ActivityResultCaller)
+ void setOnActivityResult(OnActivityResult<Result>)
+ void launch(Input,OnActivityResult<Result>)
+ void launch(Input)
- void callOnActivityResult(Result)
}
interface sigma_blue.activities.ActivityLauncher$OnActivityResult {
~ void onActivityResult(O)
}
class sigma_blue.utility.TagFilterField {
- ArrayList<Tag> tagsToMatch
+ boolean match(Item)
}
class sigma_blue.utility.ItemSortComparator {
- SortField sortBy
- int direction
- Comparator<Item> defaultComparator
- Comparator<Item> nameComparator
- Comparator<Item> dateComparator
- Comparator<Item> makeComparator
- Comparator<Item> valueComparator
- Comparator<Item> descriptionComparator
+ SortField getSortBy()
+ Comparator<Item> getComparator()
+ int getDirection()
+ void setDirection(int)
}
abstract class sigma_blue.adapter.ASelectableListAdapter {
# List<T> entityData
# Context context
# {static} GlobalContext globalContext
+ int getCount()
+ void setList(List<T>)
# void highlightControl(View,boolean)
}
class sigma_blue.utility.DateFilterField {
~ Date startDate
~ Date endDate
+ boolean match(Item)
+ Date getStartDate()
+ Date getEndDate()
}
class sigma_blue.fragments.ItemTagsFragment {
- GlobalContext globalContext
- TabMode mode
- ViewBinding binding
- ListView tagListView
- TagListAdapter tagListAdapter
- FloatingActionButton addTag
+ View onCreateView(LayoutInflater,ViewGroup,Bundle)
+ void onViewCreated(View,Bundle)
+ void onResume()
+ void updateTags()
+ void onDestroyView()
+ void updateBinding(ViewBinding)
}
enum sigma_blue.adapter.TabSelected {
+  Details
+  Tags
+  Photos
- int position
- {static} Map<Integer,TabSelected> map
+ {static} TabSelected of(int)
+ int position()
}
class sigma_blue.fragments.ItemPhotosFragment {
- GlobalContext globalContext
- TabMode mode
- ViewBinding binding
- RecyclerView itemImageList
- FloatingActionButton addPicture
+ View onCreateView(LayoutInflater,ViewGroup,Bundle)
+ void onViewCreated(View,Bundle)
+ void onResume()
+ void onDestroyView()
+ void updateImageList()
+ void updateBinding(ViewBinding)
- void handleImageClick()
- void chooseImageSource(Context)
+ void onItemClick(int)
+ void onWhatEverClick(int)
+ void onDeleteClick(int)
}
enum sigma_blue.utility.ModeField {
+  SORT
+  SEARCH
- String stringRepresentation
+ String toString()
}

note left of sigma_blue.utility.ModeField
    Handles modes for the search/filter fragment.
end note

abstract class sigma_blue.utility.FilterField {
# String filterText
# boolean enabled
# boolean exact
+ {abstract}boolean match(T)
+ String getFilterText()
+ boolean isEnabled()
}
class sigma_blue.entity.description.DescriptionManager {
- HashMap<String,String> descriptionMappings
- {static} boolean DBEnabled
- DescriptionDB descriptionDB
+ void setContext(Context)
+ void updateItemDescription(String,Response.Listener<String>,Response.ErrorListener)
- String parseResponse(String)
}
class sigma_blue.utility.StringHasher {
+ {static} String getHash(String)
- {static} String bytesToString(byte[])
}
class sigma_blue.activities.ViewListActivity {
- ActivityLauncher<Intent,ActivityResult> activityLauncher
- ViewHolder viewHolder
- GlobalContext globalContext
- FragmentManager fragmentManager
# void onCreate(Bundle)
- void handleClick(Item)
- void deleteSelectedItems()
- void displayQueryFragment(ApplicationState)
- void startFragmentTransaction(DialogFragment,String)
- void setUIOnClickListeners()
- void handleLongClick(Item)
- void handleOptionsClick()
- void handleDeleteAccount()
- void logoutUser()
}
class sigma_blue.activities.ViewListActivity$ViewHolder {
+ Button searchButton
+ Button sortFilterButton
+ Button optionsButton
+ Button deleteSelectedButton
+ Button addTagsSelectedButton
+ ConstraintLayout selectedItemsMenu
+ FloatingActionButton addEntryButton
+ TextView summaryView
+ ListView listListView
}
enum sigma_blue.utility.SortField {
+  NAME
+  DATE
+  DESCRIPTION
+  MAKE
+  VALUE
+  NO_SELECTION
- String menuName
+ String toString()
}
class sigma_blue.fragments.EditFragment {
- GlobalContext globalContext
- EditFragmentBinding binding
- EditText textName
- TabLayout tabLayout
- ViewPager2 viewPager
- ViewPagerAdapter viewPagerAdapter
- TabSelected tabSelected
+ void onCreate(Bundle)
+ View onCreateView(LayoutInflater,ViewGroup,Bundle)
+ void onViewCreated(View,Bundle)
+ void onResume()
+ void onDestroyView()
- boolean verifyName()
- void loadTextName(Item)
}
class sigma_blue.entity.item.ItemDB {
- FirebaseFirestore firestoreInjection
- Account account
+ {static} ItemDB newInstance(Account)
+ {static} ItemDB newInstance(FirebaseFirestore,Account)
- void setAccount(Account)
- void setFirestore(FirebaseFirestore)
+ void add(Item)
+ void remove(Item)
+ Account getAccount()
+ CollectionReference getCollectionReference()
}
class sigma_blue.activities.AddEditActivity {
- GlobalContext globalContext
- NavGraph graph
- NavController navController
# void onCreate(Bundle)
+ void onResume()
+ void returnAndClose()
# void onActivityResult(int,int,Intent)
}
class sigma_blue.fragments.DetailsFragment {
- GlobalContext globalContext
- DetailsFragmentBinding binding
- TextView textName
- TabLayout tabLayout
- ViewPager2 viewPager
- ViewPagerAdapter viewPagerAdapter
- TabSelected tabSelected
+ void onCreate(Bundle)
+ View onCreateView(LayoutInflater,ViewGroup,Bundle)
+ void onViewCreated(View,Bundle)
+ void onDestroyView()
}
class sigma_blue.context.GlobalContext {
- {static} GlobalContext instance
- Account account
- AccountList accountList
- ItemList itemList
- SelectedEntities<Item> selectedItems
- TagList tagList
- SelectedEntities<Tag> selectedTags
- ImageManager imageManager
- DescriptionManager descriptionManager
- Item currentItem
- Item modifiedItem
- ArrayList<ApplicationState> stateHistory
+ {static} GlobalContext getInstance()
+ void login(Account)
+ void newState(ApplicationState)
+ ApplicationState getCurrentState()
+ ApplicationState getLastState()
+ AccountList getAccountList()
+ ItemList getItemList()
+ ImageManager getImageManager()
+ TagList getTagList()
+ Item getCurrentItem()
+ void setCurrentItem(Item)
+ Account getAccount()
+ void setAccount(Account)
+ SelectedEntities<Item> getSelectedItems()
+ SelectedEntities<Tag> getSelectedTags()
+ Item getModifiedItem()
+ void setModifiedItem(Item)
+ void updateTag(Tag,Tag)
+ DescriptionManager getDescriptionManager()
}

note left of sigma_blue.context.GlobalContext
    Singleton class. Used in
    all activities and fragments.

    Also keeps track of a history
    of application states.
end note

class sigma_blue.utility.DescriptionFilterField {
+ boolean match(Item)
}
class sigma_blue.fragments.TagManagerFragment {
- GlobalContext globalContext
- TagManagerFragmentBinding binding
- Button tagCreateButton
- Button tagEditButton
- Button tagDeleteButton
- Button backButton
- Button confirmButton
- ListView tagsListView
- AddEditActivity activity
+ void onCreate(Bundle)
+ View onCreateView(LayoutInflater,ViewGroup,Bundle)
+ void onViewCreated(View,Bundle)
- boolean updateTagListView()
- void updateItemsWithTags()
+ void onDestroyView()
- void handleClick(Tag)
}

enum sigma_blue.database.DatabaseNames {
+  PRIMARY_COLLECTION
+  ITEMS_COLLECTION
+  TAGS_COLLECTION
+  ACCOUNT_INFO_COLLECTION
+  USER_INFO_DOCUMENT
- String name
+ String getName()
}

note left of sigma_blue.database.DatabaseNames
    Used to enumerate entity
    names within the database.
end note

class sigma_blue.fragments.TagEditFragment {
- GlobalContext globalContext
- EditText inputField
- Button backButton
- Button confirmButton
- Button colourButton
- Tag oldTag
- Tag modifiedTag
+ void onViewCreated(View,Bundle)
- void pickColour()
+ View onCreateView(LayoutInflater,ViewGroup,Bundle)
}
enum sigma_blue.adapter.TabMode {
+  Edit
+  Details
}
class sigma_blue.fragments.LoginFragment {
- EditText usernameInput
- EditText passwordInput
- OnFragmentInteractionListener listener
- GlobalContext globalContext
+ {static} LoginFragment newInstance(AccountList)
+ void onAttach(Context)
+ Dialog onCreateDialog(Bundle)
}
interface sigma_blue.fragments.LoginFragment$OnFragmentInteractionListener {
~ void onLoginPressed(boolean)
}
class sigma_blue.entity.image.ImageManager {
- ArrayList<String> pathList
- ArrayList<Bitmap> entityList
# ImageDB dbHandler
# ImageListAdapterFromPath adapter
- Boolean uploading
- Boolean upToDate
+ String uploadImage(Account,Bitmap)
+ void updateFromItem(Item)
+ ImageListAdapterFromPath getAdapter()
- void updateFromList()
+ void setAdapter(ImageListAdapterFromPath)
- void onImageDownload(byte[])
- void onImageUpload()
+ ArrayList<String> getPathList()
+ Bitmap compressBitmap(String,int,int)
}
class sigma_blue.entity.description.DescriptionDB {
- {static} String url
~ RequestQueue queue
+ void setContext(Context)
+ void getDescription(String,Response.Listener<String>,Response.ErrorListener)
}
class sigma_blue.utility.NameFilterField {
+ boolean match(Item)
}
abstract class sigma_blue.utility.SearchTextBoxWatcher {
~ T target
+ void beforeTextChanged(CharSequence,int,int,int)
+ void onTextChanged(CharSequence,int,int,int)
+ void afterTextChanged(Editable)
+ {abstract}void onTextChanged(T,Editable)
}
class sigma_blue.adapter.ViewPagerAdapter {
- TabMode mode
- ItemDetailsFragment itemDetailsFragment
- ItemPhotosFragment itemPhotosFragment
- ItemTagsFragment itemTagsFragment
- boolean fragmentsInitialized
- String ERROR_MESSAGE
+ Fragment createFragment(int)
+ int getItemCount()
+ boolean verifyDetailsText()
+ void saveTextToContext()
+ void updateFromContext(int)
}
class sigma_blue.entity.account.Account {
- String username
- String password
+ {static} String USERNAME
+ {static} Function<QueryDocumentSnapshot,Account> accountOfDocument
+ String getUsername()
+ String getPassword()
+ boolean checkUsername(String)
+ boolean checkPassword(String)
+ String getDocID()
+ boolean equals(Object)
+ Function<IDatabaseItem<Account>,HashMap<String,Object>> getHashMapOfEntity()
+ Account getInstance()
}
class sigma_blue.utility.ConfirmDelete {
+ {static} void confirmDelete(Context,DialogInterface.OnClickListener)
}

note right of sigma_blue.utility.ConfirmDelete
    If the user wants to delete something,
    they will be presented with a corresponding fragment.
end note

class sigma_blue.activities.ImageTakingActivity {
~ {static} int REQUEST_IMAGE_CAPTURE
~ {static} int REQUEST_BARCODE_SCAN
~ {static} int REQUEST_GALLERY_PICKING
- GlobalContext globalContext
- boolean cameraPermissionGranted
- ActivityResultLauncher<ScanOptions> barcodeLauncher
# void onCreate(Bundle)
- void dispatchIntent()
- void dispatchScanBarcodeIntent()
- void dispatchTakePictureIntent()
- void dispatchStartGalleryIntent()
# void onActivityResult(int,int,Intent)
- void checkAndroidCameraPermissions()
- void checkAndroidStoragePermissions()
+ void onRequestPermissionsResult(int,String[],int[])
}
class sigma_blue.fragments.CreateAccFragment {
- EditText usernameInput
- EditText passwordInput
- OnFragmentInteractionListener listener
- GlobalContext globalContext
+ void onAttach(Context)
+ Dialog onCreateDialog(Bundle)
}
interface sigma_blue.fragments.CreateAccFragment$OnFragmentInteractionListener {
~ void onConfirmPressed(boolean)
}
class sigma_blue.entity.tag.Tag {
- String tagText
- Color colour
+ {static} String LABEL
+ String getTagText()
+ void setTagText(String)
+ Color getColour()
+ void setColour(Color)
+ int compareTo(Tag)
+ int hashCode()
+ boolean equals(Object)
+ String getDocID()
+ String getColourString()
+ Function<IDatabaseItem<Tag>,HashMap<String,Object>> getHashMapOfEntity()
+ Tag getInstance()
}
class sigma_blue.activities.LoginPageActivity {
+ Button createAccBtn
+ Button loginBtn
- FragmentLauncher fragmentLauncher
- DialogFragment createAccFragment
- DialogFragment loginFragment
- GlobalContext globalContext
# void onCreate(Bundle)
+ void onConfirmPressed(boolean)
+ void onLoginPressed(boolean)
}
class sigma_blue.entity.image.ImageDB {
- FirebaseStorage storage
+ String addImage(Bitmap,Account,OnCompleteListener<UploadTask.TaskSnapshot>)
+ void getImage(String,OnSuccessListener<byte[]>)
}
class sigma_blue.entity.item.ItemListAdapter {
- TextView sumView
+ void notifyDataSetChanged()
+ View getView(int,View,ViewGroup)
+ String formatSummary(Double)
+ void notifySumView(Optional<Double>)
+ void setSummaryView(TextView)
- void bindPosition(View,int)
}
class sigma_blue.fragments.ItemDetailsFragment {
- GlobalContext globalContext
- TabMode mode
- ViewBinding binding
- TextView textValue
- TextView textDate
- TextView textMake
- TextView textModel
- TextView textSerial
- TextView textDescription
- TextView textComment
- ArrayList<EditText> editTextList
- Button scanSerial
- int mDay
+ View onCreateView(LayoutInflater,ViewGroup,Bundle)
+ void onViewCreated(View,Bundle)
+ void onResume()
+ void onDestroyView()
- void editItemUIBindings(Item)
- void loadUiText(Item)
+ boolean verifyText()
+ void updateText()
+ void saveText()
+ void updateBinding(ViewBinding)
}
class sigma_blue.entity.image.ImageListAdapterFromPath {
- Context mContext
- ArrayList<String> pathData
- OnItemClickListener mListener
- FirebaseStorage storage
- boolean isMenuNeeded
+ ImageViewHolder onCreateViewHolder(ViewGroup,int)
+ void onBindViewHolder(ImageViewHolder,int)
+ int getItemCount()
+ void setOnItemClickListener(OnItemClickListener)
+ ArrayList<String> getPathData()
+ void setPathData(ArrayList<String>)
}
class sigma_blue.entity.image.ImageListAdapterFromPath$ImageViewHolder {
+ ImageView imageView
+ void onClick(View)
+ void onCreateContextMenu(ContextMenu,View,ContextMenu.ContextMenuInfo)
+ boolean onMenuItemClick(MenuItem)
}
interface sigma_blue.entity.image.ImageListAdapterFromPath$OnItemClickListener {
~ void onItemClick(int)
~ void onWhatEverClick(int)
~ void onDeleteClick(int)
}
class sigma_blue.fragments.TagAddFragment {
- GlobalContext globalContext
- EditText inputField
- Button backButton
- Button confirmButton
- Button colourButton
- Tag modifiedTag
+ void onViewCreated(View,Bundle)
- void pickColour()
+ View onCreateView(LayoutInflater,ViewGroup,Bundle)
}
class sigma_blue.entity.account.AccountDB {
+ {static} AccountDB newInstance()
+ CollectionReference getCollectionReference()
}
abstract class sigma_blue.entity.AEntityList {
# ArrayList<T> entityList
# ADatabaseHandler<T> dbHandler
# ASelectableListAdapter<T> adapter
# GlobalContext globalContext
+ void setList(ArrayList<T>)
+ ArrayList<T> getList()
+ ASelectableListAdapter<T> getAdapter()
+ void setAdapter(ASelectableListAdapter<T>)
+ ArrayList<T> getEntityList()
+ void add(T)
+ {abstract}void updateUI()
+ void remove(int)
+ void remove(T)
+ void startListening()
+ void updateEntity(T,T)
+ void syncEntity(T)
+ void setDbHandler(ADatabaseHandler<T>)
+ void removeAll()
}
class sigma_blue.entity.image.MyAppGlideModule {
+ void registerComponents(Context,Glide,Registry)
}
class sigma_blue.entity.account.AccountList {
+ {static} AEntityList<Account> newInstance()
+ boolean validAccount(Account)
+ void updateUI()
+ List<Account> loadArray(QuerySnapshot)
+ void setList(ArrayList<Account>)
}
class sigma_blue.utility.MakeFilterField {
+ boolean match(Item)
}
class sigma_blue.entity.tag.TagDB {
- Account account
+ {static} TagDB newInstance(Account)
+ DocumentReference getDocRef(Tag)
+ CollectionReference getCollectionReference()
}
enum sigma_blue.context.ApplicationState {
+  SORT_MENU
+  FILTER_MENU
+  LOGIN_ACTIVITY
+  VIEW_LIST_ACTIVITY
+  CREATE_ACCOUNT_FRAGMENT
+  LOGIN_FRAGMENT
+  DETAILS_FRAGMENT
+  ADD_ITEM_FRAGMENT
+  EDIT_ITEM_FRAGMENT
+  MULTI_SELECT_TAG_MANAGER_FRAGMENT
+  TAG_MANAGER_FRAGMENT
+  TAG_ADD_FRAGMENT
+  TAG_EDIT_FRAGMENT
+  IMAGE_ADD_ACTIVITY
+  BARCODE_ADD_ACTIVITY
+  GALLERY_ADD_ACTIVITY
+  NONE
- String key
+ String toString()
}

note left of sigma_blue.context.ApplicationState
    Globally defined states for the application to
    keep track of where the user is currently.

    Navigating through menus/activities/fragments
    will change the current state.
end note

class sigma_blue.entity.item.Item {
+ {static} String dbName
- String description
- Date date
- Double value
- String serialNumber
- List<Tag> tags
- ArrayList<String> imagePaths
+ {static} SimpleDateFormat simpledf
+ {static} Function<QueryDocumentSnapshot,Item> itemOfQueryDocument
+ {static} Item newInstance(String)
+ {static} Item newInstance(String,Date,String,String,String,String,String,Double,List<String>,List<String>)
+ {static} Item newInstance(String,Date,String,String,String,String,String,Double)
+ {static} Item newInstance(String,Date,String,String,String,Double)
+ String getName()
+ void setName(String)
+ Date getDate()
+ void setDate(Date)
+ String getDescription()
+ void setDescription(String)
+ String getMake()
+ void setMake(String)
+ String getModel()
+ void setModel(String)
+ Double getValue()
+ String getFormattedValue()
+ void setValue(Double)
+ String getSerialNumber()
+ void setSerialNumber(String)
+ String getComment()
+ void setComment(String)
+ List<Tag> getTags()
+ ArrayList<String> getTagDocIDs()
+ void setTags(List<Tag>)
+ void addTag(Tag)
+ boolean deleteTag(Tag)
+ ArrayList<String> getImagePaths()
+ void addImagePath(String)
+ boolean removeImagePath(String)
+ boolean hasTag(Tag)
+ String getDocID()
+ Function<IDatabaseItem<Item>,HashMap<String,Object>> getHashMapOfEntity()
+ boolean equals(Object)
+ int compareTo(Item)
+ int hashCode()
+ Item getInstance()
+ void cleanTags(ArrayList<Tag>)
+ void updateTag(Tag,Tag)
}
abstract class sigma_blue.database.ADatabaseHandler {
- ListenerRegistration registration
# CollectionReference ref
# {static} void addDocument(CollectionReference,T,Function<T,HashMap<String,Object>>,String)
+ {static} List<T> loadArray(QuerySnapshot,Function<QueryDocumentSnapshot,T>)
# {static} void removeDocument(CollectionReference,IDatabaseItem<?>)
+ void add(IDatabaseItem<T>)
+ void remove(IDatabaseItem<T>)
+ {abstract}CollectionReference getCollectionReference()
+ void startListening(Query,IDatabaseList<T>)
- void clearRegistration()
+ DocumentReference getDocRef(IDatabaseItem<T>)
}

note left of sigma_blue.database.ADatabaseHandler
    Parent class that interfaces
    directly with Firebase.
end note

class sigma_blue.fragments.QueryFragment {
- GlobalContext globalContext
- ViewHolder viewHolder
- ModeField currentView
- VisibleItemList visibleItemList
+ void onResume()
+ void onCreate(Bundle)
+ View onCreateView(LayoutInflater,ViewGroup,Bundle)
}
class sigma_blue.fragments.QueryFragment$ViewHolder {
~ Button confirmButton
~ TextView startDateTV
~ EditText descriptionFilterET
~ Spinner sortCriteriaSpinner
~ CheckBox ascendingBox
~ DatePicker startDatePicker
~ ArrayAdapter<SortField> sortAdapter
~ ArrayAdapter<ModeField> modeAdapter
~ ViewSwitcher modeSwitcher
- List<SortField> createMenuItems()
- List<ModeField> createModeChoices()
- void createSortAdapter()
- void createModeAdapter()
+ void flipAscendBox(boolean)
- void resetQueryUI()
- void resetQuery()
+ void regenerateSelection()
- void regenerateTextBox(EditText,String)
- void setDatePickerVisibility(int)
- void dateCheckBoxController(CheckBox)
- Date dateRepresentationOfPicker(DatePicker)
- void setBoxListeners()
- void setDatePickerListeners()
+ void setUIListeners()
- void chooseModeView(ModeField)
- void swapMode(ModeField)
- void handleSortUpdate(int)
}
class sigma_blue.entity.tag.TagList {
+ {static} Function<QueryDocumentSnapshot,Tag> tagOfDocument
+ {static} TagList newInstance(Account)
+ {static} TagList newInstance()
+ {static} TagList newInstance(TagDB)
+ void updateUI()
+ List<Tag> loadArray(QuerySnapshot)
}
class sigma_blue.entity.tag.TagListAdapter {
+ {static} TagListAdapter newInstance(List<Tag>,Context)
+ View getView(int,View,ViewGroup)
}
class sigma_blue.fragments.FragmentLauncher {
- FragmentManager hostFragmentManager
+ {static} FragmentLauncher newInstance(FragmentActivity)
+ {static} FragmentLauncher newInstance(Fragment)
+ void startFragmentTransaction(DialogFragment,String)
+ void startFragmentTransaction(Fragment,String)
}
class sigma_blue.entity.item.VisibleItemList {
- FilterField<Item> makeFilterField
- ItemSortComparator itemSortComparator
- ArrayList<Item> visibleItems
+ void refreshVisibleItems()
+ void resetVisibleItems()
+ void setMakeFilterField(FilterField<Item>)
+ void setNameFilterField(FilterField<Item>)
+ void setDescriptionFilterField(FilterField<Item>)
+ void setDateFilterField(FilterField<Item>)
+ void setTagFilterField(FilterField<Item>)
+ void setItemSortComparator(ItemSortComparator)
+ FilterField<Item> getTagFilterField()
+ FilterField<Item> getMakeFilterField()
+ FilterField<Item> getNameFilterField()
+ FilterField<Item> getDescriptionFilterField()
+ FilterField<Item> getDateFilterField()
+ ItemSortComparator getItemSortComparator()
}
interface sigma_blue.database.IDatabaseList {
+ void setList(ArrayList<T>)
+ void updateUI()
+ List<T> loadArray(QuerySnapshot)
+ void startListening()
}
class sigma_blue.entity.item.ItemList {
- VisibleItemList visibleItemList
- ArrayList<Item> visibleItemArrayList
+ {static} Function<List<Item>,Optional<Double>> sumValues
+ {static} ItemList newInstance(ItemDB,ItemListAdapter)
+ {static} ItemList newInstance(ItemDB)
+ {static} ItemList newInstance()
+ void updateUI()
+ List<Item> loadArray(QuerySnapshot)
+ void setAdapter(ASelectableListAdapter<Item>)
+ void setSummaryView(TextView)
+ void cleanAllItemTags(ArrayList<Tag>)
+ void updateTags(Tag,Tag)
+ VisibleItemList getVisibleItemList()
+ ArrayList<Item> getVisibleList()
}
interface sigma_blue.database.IDatabaseItem {
+ String getDocID()
+ Function<IDatabaseItem<T>,HashMap<String,Object>> getHashMapOfEntity()
+ T getInstance()
}

note left of sigma_blue.database.IDatabaseItem
    Item, Tag, and Account
    implement IDatabaseItem.
end note

class sigma_blue.context.SelectedEntities {
~ ArrayList<T> selected
+ void toggleHighlight(T)
+ ArrayList<T> getSelected()
+ void resetSelected()
+ boolean empty()
+ int size()
+ void updateEntity(T,T)
- void removeEntity(T)
}

note left of sigma_blue.context.SelectedEntities
    Either Tags or Items are selected here.
end note

sigma_blue.utility.FilterField <|-- sigma_blue.utility.TagFilterField
android.widget.ArrayAdapter <|-- sigma_blue.adapter.ASelectableListAdapter
sigma_blue.utility.FilterField <|-- sigma_blue.utility.DateFilterField
androidx.fragment.app.Fragment <|-- sigma_blue.fragments.ItemTagsFragment
androidx.fragment.app.Fragment <|-- sigma_blue.fragments.ItemPhotosFragment
androidx.appcompat.app.AppCompatActivity <|-- sigma_blue.activities.ViewListActivity
sigma_blue.activities.ViewListActivity "  1" *-- sigma_blue.activities.ViewListActivity$ViewHolder
sigma_blue.activities.LoginPageActivity "  1" *-- sigma_blue.fragments.FragmentLauncher
sigma_blue.entity.account.AccountList "0..*" *-- sigma_blue.entity.account.Account
sigma_blue.entity.account.AccountList "1" *-- sigma_blue.entity.account.AccountDB
androidx.fragment.app.Fragment <|-- sigma_blue.fragments.EditFragment
sigma_blue.database.ADatabaseHandler <|-- sigma_blue.entity.item.ItemDB
androidx.appcompat.app.AppCompatActivity <|-- sigma_blue.activities.AddEditActivity
androidx.fragment.app.Fragment <|-- sigma_blue.fragments.DetailsFragment
sigma_blue.utility.FilterField <|-- sigma_blue.utility.DescriptionFilterField
androidx.fragment.app.Fragment <|-- sigma_blue.fragments.TagManagerFragment
androidx.fragment.app.Fragment <|-- sigma_blue.fragments.TagEditFragment
sigma_blue.fragments.TagManagerFragment "  1" o-- sigma_blue.entity.tag.TagListAdapter
sigma_blue.fragments.DetailsFragment "  1" o-- sigma_blue.entity.tag.TagListAdapter
sigma_blue.fragments.EditFragment "  1" o-- sigma_blue.entity.tag.TagListAdapter
androidx.fragment.app.DialogFragment <|-- sigma_blue.fragments.LoginFragment
sigma_blue.fragments.LoginFragment "  1" o-- sigma_blue.fragments.LoginFragment$OnFragmentInteractionListener
sigma_blue.utility.FilterField <|-- sigma_blue.utility.NameFilterField
android.text.TextWatcher <|.. sigma_blue.utility.SearchTextBoxWatcher
androidx.viewpager2.adapter.FragmentStateAdapter <|-- sigma_blue.adapter.ViewPagerAdapter
java.io.Serializable <|.. sigma_blue.entity.account.Account
sigma_blue.database.IDatabaseItem <|.. sigma_blue.entity.account.Account
androidx.appcompat.app.AppCompatActivity <|-- sigma_blue.activities.ImageTakingActivity
androidx.fragment.app.DialogFragment <|-- sigma_blue.fragments.CreateAccFragment
sigma_blue.fragments.CreateAccFragment "  1" *-- sigma_blue.fragments.CreateAccFragment$OnFragmentInteractionListener
sigma_blue.entity.tag.Comparable <|.. sigma_blue.entity.tag.Tag
sigma_blue.entity.tag.TagList "  1" *-- sigma_blue.entity.tag.TagDB
sigma_blue.entity.tag.TagList "  1" o-- sigma_blue.entity.tag.TagListAdapter
sigma_blue.database.IDatabaseItem <|.. sigma_blue.entity.tag.Tag
java.io.Serializable <|.. sigma_blue.entity.tag.Tag
sigma_blue.activities.OnFragmentInteractionListener <|.. sigma_blue.activities.LoginPageActivity
sigma_blue.activities.OnFragmentInteractionListener <|.. sigma_blue.activities.LoginPageActivity
androidx.appcompat.app.AppCompatActivity <|-- sigma_blue.activities.LoginPageActivity
sigma_blue.activities.ActivityLauncher "  1" *-- sigma_blue.activities.ActivityLauncher$OnActivityResult
sigma_blue.adapter.ASelectableListAdapter <|-- sigma_blue.entity.item.ItemListAdapter
androidx.fragment.app.Fragment <|-- sigma_blue.fragments.ItemDetailsFragment
sigma_blue.entity.image.ImageListAdapterFromPath " 1" o-- sigma_blue.entity.image.ImageListAdapterFromPath$ImageViewHolder
sigma_blue.entity.image.OnClickListener <|.. sigma_blue.entity.image.ImageListAdapterFromPath$ImageViewHolder
sigma_blue.entity.image.OnCreateContextMenuListener <|.. sigma_blue.entity.image.ImageListAdapterFromPath$ImageViewHolder
sigma_blue.entity.image.OnMenuItemClickListener <|.. sigma_blue.entity.image.ImageListAdapterFromPath$ImageViewHolder
sigma_blue.entity.image.ViewHolder <|-- sigma_blue.entity.image.ImageListAdapterFromPath$ImageViewHolder
sigma_blue.entity.image.ImageListAdapterFromPath " 1" *-- sigma_blue.entity.image.ImageListAdapterFromPath$OnItemClickListener
sigma_blue.entity.image.ImageManager " 1" *-- sigma_blue.entity.image.ImageListAdapterFromPath
sigma_blue.entity.image.ImageManager " 1" *-- sigma_blue.entity.image.ImageDB
androidx.fragment.app.Fragment <|-- sigma_blue.fragments.TagAddFragment
sigma_blue.database.ADatabaseHandler <|-- sigma_blue.entity.account.AccountDB
java.io.Serializable <|.. sigma_blue.entity.AEntityList
sigma_blue.database.IDatabaseList <|.. sigma_blue.entity.AEntityList
com.bumptech.glide.module.AppGlideModule <|-- sigma_blue.entity.image.MyAppGlideModule
sigma_blue.entity.AEntityList <|-- sigma_blue.entity.account.AccountList
sigma_blue.utility.FilterField <|-- sigma_blue.utility.MakeFilterField
sigma_blue.database.ADatabaseHandler <|-- sigma_blue.entity.tag.TagDB
sigma_blue.entity.item.Comparable <|.. sigma_blue.entity.item.Item
sigma_blue.entity.item.Item "0..*" o-- sigma_blue.entity.tag.Tag
sigma_blue.entity.item.ItemList "0..*" o-- sigma_blue.entity.item.Item
sigma_blue.entity.item.VisibleItemList "0..*" o-- sigma_blue.entity.item.Item
sigma_blue.entity.item.ItemList "1" *-- sigma_blue.entity.item.ItemDB
sigma_blue.entity.item.ItemListAdapter "  1" o-- sigma_blue.activities.ViewListActivity
sigma_blue.entity.item.ItemFactory "creates" -- sigma_blue.entity.item.Item
java.io.Serializable <|.. sigma_blue.entity.item.Item
sigma_blue.database.IDatabaseItem <|.. sigma_blue.entity.item.Item
androidx.fragment.app.DialogFragment <|-- sigma_blue.fragments.QueryFragment
sigma_blue.fragments.QueryFragment "  1" *-- sigma_blue.fragments.QueryFragment$ViewHolder
sigma_blue.entity.AEntityList <|-- sigma_blue.entity.tag.TagList
sigma_blue.adapter.ASelectableListAdapter <|-- sigma_blue.entity.tag.TagListAdapter
sigma_blue.entity.AEntityList <|-- sigma_blue.entity.item.ItemList
sigma_blue.entity.description.DescriptionDB "  1" *-- sigma_blue.entity.description.DescriptionManager
sigma_blue.entity.item.VisibleItemList "  1" *-- sigma_blue.utility.ItemSortComparator
@enduml